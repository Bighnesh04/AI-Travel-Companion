from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY
from io import BytesIO
from datetime import datetime
import re

class ExportManager:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles"""
        
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor='#2E86AB'
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            textColor='#A23B72'
        ))
        
        # Day header style
        self.styles.add(ParagraphStyle(
            name='DayHeader',
            parent=self.styles['Heading3'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20,
            textColor='#F18F01'
        ))
    
    def export_to_pdf(self, itinerary: str, destination: str) -> BytesIO:
        """Export itinerary to PDF format"""
        
        buffer = BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Content list
        story = []
        
        # Title
        title = Paragraph(f"Travel Itinerary: {destination}", self.styles['CustomTitle'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Generation date
        date_generated = Paragraph(
            f"Generated on: {datetime.now().strftime('%B %d, %Y')}",
            self.styles['Normal']
        )
        story.append(date_generated)
        story.append(Spacer(1, 30))
        
        # Process itinerary content
        processed_content = self._process_itinerary_for_pdf(itinerary)
        
        for item in processed_content:
            story.append(item)
        
        # Footer
        story.append(Spacer(1, 30))
        footer = Paragraph(
            "Generated by AI Travel Companion - Have a wonderful trip! ‚úàÔ∏è",
            self.styles['Normal']
        )
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer
    
    def _process_itinerary_for_pdf(self, itinerary: str):
        """Process itinerary text into PDF-ready paragraphs"""
        
        story = []
        lines = itinerary.split('\n')
        
        current_paragraph = []
        
        for line in lines:
            line = line.strip()
            
            if not line:
                # Empty line - end current paragraph
                if current_paragraph:
                    para_text = ' '.join(current_paragraph)
                    story.append(Paragraph(para_text, self.styles['Normal']))
                    story.append(Spacer(1, 12))
                    current_paragraph = []
                continue
            
            # Check if line is a day header
            if re.match(r'^Day\s+\d+', line, re.IGNORECASE):
                # End current paragraph
                if current_paragraph:
                    para_text = ' '.join(current_paragraph)
                    story.append(Paragraph(para_text, self.styles['Normal']))
                    story.append(Spacer(1, 12))
                    current_paragraph = []
                
                # Add day header
                story.append(Paragraph(line, self.styles['DayHeader']))
                continue
            
            # Check if line is a section header
            if line.isupper() or (line.endswith(':') and len(line.split()) <= 4):
                # End current paragraph
                if current_paragraph:
                    para_text = ' '.join(current_paragraph)
                    story.append(Paragraph(para_text, self.styles['Normal']))
                    story.append(Spacer(1, 12))
                    current_paragraph = []
                
                # Add section header
                story.append(Paragraph(line, self.styles['CustomSubtitle']))
                continue
            
            # Regular line - add to current paragraph
            current_paragraph.append(line)
        
        # Add final paragraph
        if current_paragraph:
            para_text = ' '.join(current_paragraph)
            story.append(Paragraph(para_text, self.styles['Normal']))
        
        return story
    
    def export_to_markdown(self, itinerary: str, destination: str) -> str:
        """Export itinerary to Markdown format"""
        
        markdown_content = f"""# üåç Travel Itinerary: {destination}

**Generated on:** {datetime.now().strftime('%B %d, %Y')}  
**Created by:** AI Travel Companion ‚úàÔ∏è

---

{self._process_itinerary_for_markdown(itinerary)}

---

## üìù Notes

- This itinerary was generated using AI and should be used as a starting point
- Always verify opening hours, prices, and availability before your trip
- Consider booking popular attractions in advance
- Check local weather conditions and pack accordingly

## üîó Useful Links

- Local tourism website
- Transportation information
- Emergency contacts

---

*Have a wonderful trip! Safe travels! üß≥‚úàÔ∏è*
"""
        
        return markdown_content
    
    def _process_itinerary_for_markdown(self, itinerary: str) -> str:
        """Process itinerary text for better Markdown formatting"""
        
        lines = itinerary.split('\n')
        processed_lines = []
        
        for line in lines:
            line = line.strip()
            
            if not line:
                processed_lines.append('')
                continue
            
            # Convert day headers
            if re.match(r'^Day\s+\d+', line, re.IGNORECASE):
                processed_lines.append(f"## üìÖ {line}")
                processed_lines.append('')
                continue
            
            # Convert section headers
            if line.isupper() or (line.endswith(':') and len(line.split()) <= 4):
                processed_lines.append(f"### {line}")
                processed_lines.append('')
                continue
            
            # Convert bullet points
            if line.startswith('-') or line.startswith('‚Ä¢'):
                processed_lines.append(line)
                continue
            
            # Regular text
            processed_lines.append(line)
        
        return '\n'.join(processed_lines)
    
    def export_review_analytics_to_pdf(self, analytics_data: dict, destination: str) -> BytesIO:
        """Export review analytics to PDF"""
        
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        story = []
        
        # Title
        title = Paragraph(f"Review Analytics: {destination}", self.styles['CustomTitle'])
        story.append(title)
        story.append(Spacer(1, 30))
        
        # Summary statistics
        total_reviews = analytics_data.get('total_reviews', 0)
        sentiment_dist = analytics_data.get('sentiment_distribution', {})
        
        summary = f"""
        <b>Analysis Summary:</b><br/>
        ‚Ä¢ Total Reviews Analyzed: {total_reviews}<br/>
        ‚Ä¢ Positive Reviews: {sentiment_dist.get('Positive', 0)} ({analytics_data.get('sentiment_percentages', {}).get('Positive', 0)}%)<br/>
        ‚Ä¢ Neutral Reviews: {sentiment_dist.get('Neutral', 0)} ({analytics_data.get('sentiment_percentages', {}).get('Neutral', 0)}%)<br/>
        ‚Ä¢ Negative Reviews: {sentiment_dist.get('Negative', 0)} ({analytics_data.get('sentiment_percentages', {}).get('Negative', 0)}%)<br/>
        """
        
        story.append(Paragraph(summary, self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Key insights
        story.append(Paragraph("Key Insights:", self.styles['CustomSubtitle']))
        
        insights = analytics_data.get('insights', [])
        for insight in insights:
            story.append(Paragraph(f"‚Ä¢ {insight}", self.styles['Normal']))
        
        doc.build(story)
        buffer.seek(0)
        return buffer